{"version":3,"sources":["components/DatePicker/index.tsx","App.tsx","index.tsx"],"names":["initializeIcons","rootClass","mergeStyles","minWidth","selectors","margin","display","justifyContent","flexDirection","padding","borderRadius","background","iconProps","iconName","className","color","fontSize","lineHeight","position","right","DatePicker","React","useState","time","setTime","date","setDate","error","setError","dateTime","setDateTime","timeStamp","setTimeStamp","useEffect","length","test","result","dateStr","format","getUnixTime","parse","Date","placeholder","ariaLabel","strings","defaultDatePickerStrings","highlightCurrentMonth","highlightSelectedMonth","initialPickerDate","onSelectDate","showGoToToday","value","formatDate","MaskedTextField","mask","title","onChange","e","errorMessage","Intl","DateTimeFormat","resolvedOptions","timeZone","DefaultButton","text","onClick","navigator","clipboard","writeText","then","catch","err","el","document","createElement","body","appendChild","select","execCommand","removeChild","copyToClickBoard","App","style","marginBottom","width","textAlign","ReactDOM","render","StrictMode","getElementById"],"mappings":"6QAWAA,cAEA,IAAMC,EAAYC,YAAY,CAC5BC,SAAU,IACVC,UAAW,CAAE,MAAO,CAAEC,OAAQ,WAC9BC,QAAS,OACTC,eAAgB,SAChBC,cAAe,SACfC,QAAS,GACTC,aAAc,GACdC,WAAY,6BAWRC,EAAY,CAAEC,SAAU,aAAcC,UAT1BZ,YAAY,CAC5Ba,MAAO,QACPC,SAAU,GACVC,WAAY,GACZC,SAAU,WACVC,MAAO,EACPV,QAAS,iBA0BJ,IAAMW,EAAsC,WAAO,IAAD,EAC/BC,IAAMC,SAAS,IADgB,mBAChDC,EADgD,KAC1CC,EAD0C,OAE/BH,IAAMC,WAFyB,mBAEhDG,EAFgD,KAE1CC,EAF0C,OAG7BL,IAAMC,SAAS,IAHc,mBAGhDK,EAHgD,KAGzCC,EAHyC,OAIvBP,IAAMC,SAAS,IAJQ,mBAIhDO,EAJgD,KAItCC,EAJsC,OAKrBT,IAAMC,SAAS,IALM,mBAKhDS,EALgD,KAKrCC,EALqC,KA0BvD,OAnBAX,IAAMY,WAAU,WACd,GAAIV,EAAKW,SAAW,IAAIC,KAAKZ,GAAO,CAClC,IAAMa,EAAS,qDAAqDD,KAAKZ,GAEhEK,EAATQ,EAAkB,GAAe,0BAEjCR,EAAS,MAEV,CAACL,IACJF,IAAMY,WAAU,WACd,GAAIR,GAAQF,EAAKW,SAAW,IAAIC,KAAKZ,GAAO,CAC1C,IAAMc,EAAUC,YAAOb,EAAM,cACvBI,EAAQ,UAAMQ,EAAN,YAAiBd,GAE/BO,EAAYD,GACZG,EAAa,GAAD,OAAIO,YAAYC,YAAMX,EAAU,mBAAoB,IAAIY,YAErE,CAAChB,EAAMF,IAGR,sBAAKT,UAAWb,EAAhB,UACE,cAAC,IAAD,CACEyC,YAAY,mBACZC,UAAU,gBACVC,QAASC,IACTC,uBAAqB,EACrBC,wBAAsB,EACtBC,kBAAmB,IAAIP,KACvBQ,aAAc,SAACxB,GAAD,OAAUA,GAAQC,EAAQD,IACxCyB,eAAa,EACbC,MAAO1B,EACP2B,WAAY,SAAC3B,GAAD,OAAWA,EAAOa,YAAOb,EAAM,iBAAmB,MAEhE,cAAC4B,EAAA,EAAD,CACEC,KAAK,UACLC,MAAM,OACN3C,UAAWA,EACX4C,SAAU,SAACC,EAAGN,GAAJ,OAAc3B,EAAO,OAAC2B,QAAD,IAACA,IAAS,KACzCO,aAAc/B,IAEhB,uBACA,gCACE,0CADF,IACoBgC,KAAKC,iBAAiBC,kBAAkBC,YAE5D,gCACE,sCADF,IACgBjC,KAEhB,uBACCE,GAA2B,QAAdA,IAAwBJ,GACpC,qCACE,gCACE,kDADF,iBACkCI,EADlC,UAGA,uBACA,cAACgC,EAAA,EAAD,CACEC,KAAK,gBACLC,QAAS,kBApFrB,SAA0BD,GACxB,GAAKE,UAAUC,UAQbD,UAAUC,UACPC,UAAUJ,GACVK,MAAK,WACJ,OAAO,KAERC,OAAM,SAACC,GACN,OAAO,SAda,CACxB,IAAMC,EAAKC,SAASC,cAAc,YAClCF,EAAGrB,MAAQa,EACXS,SAASE,KAAKC,YAAYJ,GAC1BA,EAAGK,SACHJ,SAASK,YAAY,QACrBL,SAASE,KAAKI,YAAYP,GAW5B,OAAO,EAkEkBQ,CAAiB,MAAD,OAAOjD,EAAP,kBCxG5BkD,EAXO,WACpB,OACE,gCACE,qBAAKC,MAAO,CAAEC,aAAc,IAAKC,MAAO,IAAKC,UAAW,UAAxD,mCAGA,cAAC,EAAD,QCJNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,qBAAK1E,UAAU,UAAf,SACE,cAAC,EAAD,QAGJ2D,SAASgB,eAAe,W","file":"static/js/main.5cff93d7.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  DatePicker as DatePickerUI,\n  mergeStyles,\n  defaultDatePickerStrings,\n  initializeIcons,\n  MaskedTextField,\n  DefaultButton,\n} from '@fluentui/react'\nimport { format, parse, getUnixTime } from 'date-fns'\n\ninitializeIcons()\n\nconst rootClass = mergeStyles({\n  minWidth: 310,\n  selectors: { '> *': { margin: '0 auto' } },\n  display: 'flex',\n  justifyContent: 'center',\n  flexDirection: 'column',\n  padding: 15,\n  borderRadius: 10,\n  background: 'rgba(255, 255, 255, 0.1)',\n})\nconst iconClass = mergeStyles({\n  color: 'black',\n  fontSize: 16,\n  lineHeight: 18,\n  position: 'absolute',\n  right: 4,\n  padding: '7px 5px 5px',\n})\n\nconst iconProps = { iconName: 'TimePicker', className: iconClass }\n\nfunction copyToClickBoard(text: string) {\n  if (!navigator.clipboard) {\n    const el = document.createElement('textarea')\n    el.value = text\n    document.body.appendChild(el)\n    el.select()\n    document.execCommand('copy')\n    document.body.removeChild(el)\n  } else {\n    navigator.clipboard\n      .writeText(text)\n      .then(() => {\n        return true\n      })\n      .catch((err) => {\n        return false\n      })\n  }\n  return true\n}\n\nexport const DatePicker: React.FunctionComponent = () => {\n  const [time, setTime] = React.useState('')\n  const [date, setDate] = React.useState<Date>()\n  const [error, setError] = React.useState('')\n  const [dateTime, setDateTime] = React.useState('')\n  const [timeStamp, setTimeStamp] = React.useState('')\n\n  React.useEffect(() => {\n    if (time.length && !/_/.test(time)) {\n      const result = /^(?:(?:([01]?\\d|2[0-3]):)?([0-5]?\\d):)?([0-5]?\\d)$/.test(time)\n\n      result ? setError('') : setError('Wrong time format')\n    } else {\n      setError('')\n    }\n  }, [time])\n  React.useEffect(() => {\n    if (date && time.length && !/_/.test(time)) {\n      const dateStr = format(date, 'dd.MM.yyyy')\n      const dateTime = `${dateStr} ${time}`\n\n      setDateTime(dateTime)\n      setTimeStamp(`${getUnixTime(parse(dateTime, 'dd.MM.yyyy HH:mm', new Date()))}`)\n    }\n  }, [date, time])\n\n  return (\n    <div className={rootClass}>\n      <DatePickerUI\n        placeholder=\"Select a date...\"\n        ariaLabel=\"Select a date\"\n        strings={defaultDatePickerStrings}\n        highlightCurrentMonth\n        highlightSelectedMonth\n        initialPickerDate={new Date()}\n        onSelectDate={(date) => date && setDate(date)}\n        showGoToToday\n        value={date}\n        formatDate={(date) => (date ? format(date, 'MMMM do, yyyy') : '')}\n      />\n      <MaskedTextField\n        mask=\"99\\:99\"\n        title=\"time\"\n        iconProps={iconProps}\n        onChange={(e, value) => setTime(value ?? '')}\n        errorMessage={error}\n      />\n      <br />\n      <div>\n        <b>timezone:</b> {Intl.DateTimeFormat().resolvedOptions().timeZone}\n      </div>\n      <div>\n        <b>date:</b> {dateTime}\n      </div>\n      <br />\n      {timeStamp && timeStamp !== 'NaN' && !error && (\n        <>\n          <div>\n            <b>discord timestamp:</b> {`<t:${timeStamp}:F>`}\n          </div>\n          <br />\n          <DefaultButton\n            text=\"Click to copy\"\n            onClick={() => copyToClickBoard(`<t:${timeStamp}:F>`)}\n          />\n        </>\n      )}\n    </div>\n  )\n}\n","import React from 'react'\nimport { DatePicker } from './components/DatePicker'\n\nconst App: React.FC = () => {\n  return (\n    <div>\n      <div style={{ marginBottom: 100, width: 310, textAlign: 'center' }}>\n        made by Delirium#0001\n      </div>\n      <DatePicker />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <div className=\"wrapper\">\n      <App />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}
